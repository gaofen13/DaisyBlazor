@page "/"

<DaisyRadialProgress Class="text-primary" Value="10">10%</DaisyRadialProgress>
<DaisyProgress Indeterminate Value="20" Max="100"></DaisyProgress>

<DaisyAlert>
    <DaisyButton>关闭</DaisyButton>
</DaisyAlert>
<DaisyTooltip Style="width:100%" Message="alert">
    <DaisyAlert Level="Level.Warning">Alert</DaisyAlert>
</DaisyTooltip>

<div class="join">
    <DaisyButton Class="join-item" Color="@color" OnClick="@(()=>add+=1)">Button @add</DaisyButton>
    <DaisyButton Class="join-item" Color="Color.Secondary" OnClick="@Toggle">Button2</DaisyButton>
    <DaisyButton Class="join-item" Color="Color.Error" OnClick="@ShowToast">Button3</DaisyButton>
</div>

<DaisyFormField Label="输入框">
    <DaisyInputText @ref="@_input" @bind-Value="@input" Bordered="@true" AutoFocus="@true" />
</DaisyFormField>
<DaisyFormField Label="选择器">
    <DaisySelect @bind-Value=color>
        <option value="@Color.Primary">Primary</option>
        <option value="@Color.Secondary">Secondary</option>
        <option value="@Color.Accent">Accent</option>
    </DaisySelect>
</DaisyFormField>
<DaisyFormField Label="单选器">
    <DaisyRadioGroup @bind-Value="@color">
        <DaisyRadio Label="Primary" Value="Color.Primary" />
        <DaisyRadio Label="Secondary" Value="Color.Secondary" />
        <DaisyRadio Label="Accent" Value="Color.Accent" />
    </DaisyRadioGroup>
</DaisyFormField>
<DaisyFormField Label="复选框">
    <DaisyCheckbox Label="开启Modal" @bind-Value="check" />
</DaisyFormField>

@code {
    private DaisyInputText? _input;
    private bool check;
    private string input = "";
    private int add;
    private Color color = Color.Info;

    [Inject] private NavigationManager? Navigation { get; set; }
    [Inject] private ModalService? Modal { get; set; }
    [Inject] private ToastService? Toast { get; set; }

    private async Task Toggle()
    {
        var parameters = new ComponentParameters();
        parameters.Add("Test", "Dialog");
        var reference = Modal?.Show<DailogTest>(parameters);
        var res = await reference!.Result;
        if (res.Data?.ToString() == "test")
        {
            await _input!.FocusAsync();
        }
    }

    private void ShowToast()
    {
        add++;
        Toast?.ShowError(add.ToString(), "Error", new ToastOptions { TimeOut = 3000 });
        Toast?.ShowToast<ToastTest>(new ToastOptions { TimeOut = 4000 });
        Toast?.ShowSuccess(add.ToString(), "Success");
    }
}